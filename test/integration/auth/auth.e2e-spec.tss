import { Test, TestingModule } from '@nestjs/testing';
import { INestApplication } from '@nestjs/common';
import { AppModule } from '../../../src/app.module';
import { UserService } from '../../../src/user/user.service';
import { UserModule } from '../../../src/user/user.module';
import { JwtStrategy } from '../../../src/auth/jwt.strategy';
import { TypeOrmModule, getRepositoryToken } from '@nestjs/typeorm';
import { User } from '../../../src/user/entity/user.entity'
import supertest, * as request from 'supertest';
import { Book } from '../../../src/book/entity/book.entity';
import { Author } from '../../../src/author/entity/author.entity';
import { Reservation } from '../../../src/reservation/entity/reservation.entity';

describe('UserController (e2e)', () => {
    let app: INestApplication;
    let token:string = "";

    beforeAll(async () => {

        const moduleFixture: TestingModule = await Test.createTestingModule({
            imports: [
                AppModule,
                UserModule,
                TypeOrmModule.forRoot({
                type: 'mysql',
                host: 'localhost',
                port: 3306,
                username: 'root',
                password: 'Mapacha.77',
                database: 'biblioteca',
                //entities: [User, Book, Author, Reservation], 
                entities: [__dirname + "../../../entities/**/*.entity.ts"],
                synchronize: false
              }),
                TypeOrmModule.forFeature([User]),
              
              
            ],
            //imports:[AppModule, UserModule],
            providers: [UserService],
          }).compile();
      
          app = moduleFixture.createNestApplication();
          await app.init();

    });

    describe('UserController (e2e), CRUD operations', () => {
        it('/auth (GET) get token', async () => {
            const authInfo = {username: 'alex@gmail.com', password: 'alex123'};
            const response = await request(app.getHttpServer())
            .post('/auth/login')
            .send(authInfo);

            console.log("BEFORE TOKEN " + __dirname)
            console.log(response.body)
            console.log(response)

            expect(response.status).toBe(201);            
            token = response.body.token;
        });
    });
});